{"version":3,"sources":["ThuUpdatedSearch.js","LetterForm.js","App.js","serviceWorker.js","index.js"],"names":["dictionary","require","ThuUpdatedSearch","props","scramble","letters","toLowerCase","newList","Object","keys","entries","powerSetArray","str","obj","i","length","array","result","j","len","x","push","concat","powerSet","newCombos","generateAnagrams","join","word","before","focus","subAnagrams","newEntry","anagrams","k","slice","combos","filter","v","flat","sort","returnedList","console","log","string","definition","items","map","keyName","keyIndex","react_default","a","createElement","className","key","title","LetterForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","handleSubmit","clearForm","event","setState","target","alert","preventDefault","onSubmit","id","type","onChange","maxLength","placeholder","onClick","Component","App","src_LetterForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95b96754.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// import raw dictionary data\nlet dictionary = require('./Dictionary.json');\n\nexport default function ThuUpdatedSearch(props) {\n\n     // set the user input to all lowercase letters\n     let scramble = props.letters.toLowerCase();\n\n     // pull out the dictionary words and definitions for possible later use\n     let dictionaryWordsArray = Object.keys(dictionary);\n     let dictionaryEntriesArray = Object.entries(dictionary);\n\n     //////////////// PREP WORK - GETTING ALL COMBOS //////////////////////////////////////\n\n     // Use powerset to test all possible combinations of letters @param string 'scramble'\n     let newList = [];\n     let powerSetArray = powerSet(scramble);\n     for (var i = 0; i < powerSetArray.length; i++) {\n          let powerWord = powerSetArray[i].join('');\n          let newCombos = generateAnagrams(powerWord);\n          newList.push(newCombos);\n     }\n\n     /* PowerSet Engine */\n\n     function powerSet(str) {\n         var obj = {}\n         //This loop is to take out all duplicate number/letter\n         for(var i=0;i<str.length; i++){\n            obj[str[i]] = true;\n         }\n         //variable array will have no duplicates\n         var array = Object.keys(obj);\n         var result = [[]];\n         for(var j=0; j<array.length ;j++){\n            //this line is crucial! It prevents us from infinite loop\n            var len = result.length;\n            for(var x=0; x<len ;x++){\n              result.push(result[x].concat(array[j]))\n            }\n         }\n     return result;\n     }\n\n     /* Improved Anagram Engine */\n\n     // Without generators, it's difficult to write this function\n     // with the capability of processing a word of any length without\n     // crashing the web browser, so this is written as the original,\n     // with non-controlled execution speed. Long (7+ char) words may\n     // crash browser.\n\n     function generateAnagrams(word) {\n\n         if (word.length < 2) {\n\n             return [word];\n\n         } else {\n\n             // By declaring all variables outside of the loop,\n             // we improve efficiency, avoiding the needless\n             // declarations each time.\n\n             var anagrams = [];\n             var before, focus, after;\n             var shortWord, subAnagrams, newEntry;\n             //var  = 0;\n\n             for (var k = 0; k < word.length; k++) {\n\n                 before = word.slice(0, k);\n                 focus = word[k];\n                 after = word.slice(k + 1, word.length + 1);\n                 shortWord = before + after;\n                 subAnagrams = generateAnagrams(shortWord);\n\n                 for (var j = 0; j < subAnagrams.length; j++){\n\n                     newEntry = focus + subAnagrams[j];\n                     anagrams.push(newEntry);\n\n                 }\n\n             }\n\n             return anagrams;\n\n         }\n\n     }\n\n     // remove empty strings from array\n     newList = newList.filter(v=>v!=='');\n\n     // remove single letters from array\n     newList = newList.filter(v=>v.length>1);\n\n     // flatten array of arrays into single array\n     newList = newList.flat();\n\n     //////////////////////////////////////////////////////\n     // NOW TEST ALL COMBOS AGAINST THE DICTIONARY\n     //////////////////////////////////////////////////////\n\n     let combos = newList.sort();\n     let returnedList = {};\n\n     console.log('All Possible Permutations (array):');\n     console.log(combos);\n\n     for (var x = 0; x < combos.length; x++) {\n\n          let string = combos[x];\n          let definition = dictionary[string];\n\n          if( dictionary[string] ) {\n               returnedList[string] = definition;\n          }\n\n\n     }\n\n\n     //////////////////////////////////////////////////////\n     // RETURN DISPLAY RESULTS\n     //////////////////////////////////////////////////////\n\n     let items = 'No words found yet...';\n     let returnedListLength = Object.keys(returnedList).length;\n\n\n     if( returnedListLength > 0 ) {\n\n          items = Object.keys(returnedList).map(function(keyName, keyIndex) {\n               console.log(keyName + ': ' + returnedList[keyName]);\n            return ( <li className=\"word-hit\" key={keyIndex} title={returnedList[keyName]}><span className=\"word-only\">{keyName}</span></li> );\n          });\n\n     }\n\n\n\n     return (\n          <div>\n               <div className=\"form-area\"><h3>Your Results:</h3><ul>{items}</ul></div>\n               <div className=\"combos\">Tested {combos.length} possible combinations</div>\n          </div> );\n\n\n}\n","import React, { Component } from 'react';\nimport ThuUpdatedSearch from './ThuUpdatedSearch.js';\n\nclass LetterForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n         value: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.clearForm = this.clearForm.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  clearForm(event) {\n       console.log('Clear Button');\n       this.setState({value: ''});\n }\n\n  render() {\n    return (\n         <div className=\"letter-form-area\">\n           <form onSubmit={this.handleSubmit} id=\"letter-form\">\n             <label>\n               Your Letters:\n               <input type=\"text\" value={this.state.value} onChange={this.handleChange}  maxLength=\"9\" placeholder=\"9 letters max\" id=\"letter-area\" />\n             </label>\n             <button type=\"button\" id=\"clear-button\" onClick={this.clearForm}>Start Over</button>\n           </form>\n           <ThuUpdatedSearch letters={this.state.value} />\n      </div>\n    );\n  }\n}\n\nexport default LetterForm;\n","import React, { Component } from 'react';\nimport './App.css';\nimport LetterForm from './LetterForm.js';\n\n//let dictionary = require('./Dictionary.json');\n//console.log(Object.keys(dictionary));\n//let letters = '';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Welcome to The Unscrambler</h1>\n          <div className=\"clb-credit\">Created by Chris Liu-Beers &middot; Tomatillo Design</div>\n        </header>\n        <LetterForm />\n        <footer className=\"clb-footer\">Dictionary Source: 1913 Edition of Webster's Unabridged English Dictionary</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}